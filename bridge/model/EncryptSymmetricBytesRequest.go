// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EncryptSymmetricBytesRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsEncryptSymmetricBytesRequest(buf []byte, offset flatbuffers.UOffsetT) *EncryptSymmetricBytesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EncryptSymmetricBytesRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEncryptSymmetricBytesRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEncryptSymmetricBytesRequest(buf []byte, offset flatbuffers.UOffsetT) *EncryptSymmetricBytesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EncryptSymmetricBytesRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEncryptSymmetricBytesRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EncryptSymmetricBytesRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EncryptSymmetricBytesRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EncryptSymmetricBytesRequest) Message(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *EncryptSymmetricBytesRequest) MessageLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *EncryptSymmetricBytesRequest) MessageBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EncryptSymmetricBytesRequest) MutateMessage(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *EncryptSymmetricBytesRequest) Passphrase() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EncryptSymmetricBytesRequest) Options(obj *KeyOptions) *KeyOptions {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(KeyOptions)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EncryptSymmetricBytesRequest) FileHints(obj *FileHints) *FileHints {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(FileHints)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func EncryptSymmetricBytesRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EncryptSymmetricBytesRequestAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(message), 0)
}
func EncryptSymmetricBytesRequestStartMessageVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func EncryptSymmetricBytesRequestAddPassphrase(builder *flatbuffers.Builder, passphrase flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(passphrase), 0)
}
func EncryptSymmetricBytesRequestAddOptions(builder *flatbuffers.Builder, options flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(options), 0)
}
func EncryptSymmetricBytesRequestAddFileHints(builder *flatbuffers.Builder, fileHints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fileHints), 0)
}
func EncryptSymmetricBytesRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
