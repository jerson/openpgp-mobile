// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PublicKeyMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsPublicKeyMetadata(buf []byte, offset flatbuffers.UOffsetT) *PublicKeyMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PublicKeyMetadata{}
	x.Init(buf, n+offset)
	return x
}

func FinishPublicKeyMetadataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPublicKeyMetadata(buf []byte, offset flatbuffers.UOffsetT) *PublicKeyMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PublicKeyMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPublicKeyMetadataBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PublicKeyMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PublicKeyMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PublicKeyMetadata) Algorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) KeyId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) KeyIdShort() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) CreationTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) Fingerprint() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) KeyIdNumeric() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PublicKeyMetadata) IsSubKey() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PublicKeyMetadata) MutateIsSubKey(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

func (rcv *PublicKeyMetadata) CanSign() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PublicKeyMetadata) MutateCanSign(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

func (rcv *PublicKeyMetadata) CanEncrypt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PublicKeyMetadata) MutateCanEncrypt(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

func (rcv *PublicKeyMetadata) Identities(obj *Identity, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PublicKeyMetadata) IdentitiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PublicKeyMetadata) SubKeys(obj *PublicKeyMetadata, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PublicKeyMetadata) SubKeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PublicKeyMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func PublicKeyMetadataAddAlgorithm(builder *flatbuffers.Builder, algorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(algorithm), 0)
}
func PublicKeyMetadataAddKeyId(builder *flatbuffers.Builder, keyId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(keyId), 0)
}
func PublicKeyMetadataAddKeyIdShort(builder *flatbuffers.Builder, keyIdShort flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(keyIdShort), 0)
}
func PublicKeyMetadataAddCreationTime(builder *flatbuffers.Builder, creationTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(creationTime), 0)
}
func PublicKeyMetadataAddFingerprint(builder *flatbuffers.Builder, fingerprint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(fingerprint), 0)
}
func PublicKeyMetadataAddKeyIdNumeric(builder *flatbuffers.Builder, keyIdNumeric flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(keyIdNumeric), 0)
}
func PublicKeyMetadataAddIsSubKey(builder *flatbuffers.Builder, isSubKey bool) {
	builder.PrependBoolSlot(6, isSubKey, false)
}
func PublicKeyMetadataAddCanSign(builder *flatbuffers.Builder, canSign bool) {
	builder.PrependBoolSlot(7, canSign, false)
}
func PublicKeyMetadataAddCanEncrypt(builder *flatbuffers.Builder, canEncrypt bool) {
	builder.PrependBoolSlot(8, canEncrypt, false)
}
func PublicKeyMetadataAddIdentities(builder *flatbuffers.Builder, identities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(identities), 0)
}
func PublicKeyMetadataStartIdentitiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PublicKeyMetadataAddSubKeys(builder *flatbuffers.Builder, subKeys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(subKeys), 0)
}
func PublicKeyMetadataStartSubKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PublicKeyMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
