namespace model;

enum Algorithm : int {
  RSA = 0,
  ECDSA = 1,
  EDDSA = 2,
  ECHD = 3,
  DSA = 4,
  ELGAMAL = 5,
}

enum Curve : int {
  CURVE25519 = 0,
  CURVE448 = 1,
  P256 = 2,
  P384 = 3,
  P521 = 4,
  SECP256K1 = 5,
  BRAINPOOLP256 = 6,
  BRAINPOOLP384 = 7,
  BRAINPOOLP512 = 8,
}

enum Hash : int {
  SHA256 = 0,
  SHA224 = 1,
  SHA384 = 2,
  SHA512 = 3,
}

enum Compression : int {
  NONE = 0,
  ZLIB = 1,
  ZIP = 2,
}

enum Cipher : int {
  AES128 = 0,
  AES192 = 1,
  AES256 = 2,
  DES = 3,
  CAST5 = 4,
}

table EncryptRequest {
  message:string;
  public_key:string;
  options:model.KeyOptions;
  signed:model.Entity;
  file_hints:model.FileHints;
}

table EncryptFileRequest {
  input:string;
  output:string;
  public_key:string;
  options:model.KeyOptions;
  signed:model.Entity;
  file_hints:model.FileHints;
}

table EncryptBytesRequest {
  message:[ubyte];
  public_key:string;
  options:model.KeyOptions;
  signed:model.Entity;
  file_hints:model.FileHints;
}

table DecryptRequest {
  message:string;
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table DecryptFileRequest {
  input:string;
  output:string;
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table DecryptBytesRequest {
  message:[ubyte];
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table SignRequest {
  message:string;
  public_key:string (deprecated); 
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table SignFileRequest {
  input:string;
  public_key:string (deprecated);
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table SignBytesRequest {
  message:[ubyte];
  public_key:string (deprecated);
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table SignDataRequest {
  message:string;
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table SignDataBytesRequest {
  message:[ubyte];
  private_key:string;
  passphrase:string;
  options:model.KeyOptions;
}

table VerifyRequest {
  signature:string;
  message:string;
  public_key:string;
}

table VerifyFileRequest {
  signature:string;
  input:string;
  public_key:string;
}

table VerifyBytesRequest {
  signature:string;
  message:[ubyte];
  public_key:string;
}

table VerifyDataRequest {
  signature:string;
  public_key:string;
}

table VerifyDataBytesRequest {
  signature:[ubyte];
  public_key:string;
}

table EncryptSymmetricRequest {
  message:string;
  passphrase:string;
  options:model.KeyOptions;
  file_hints:model.FileHints;
}

table EncryptSymmetricFileRequest {
  input:string;
  output:string;
  passphrase:string;
  options:model.KeyOptions;
  file_hints:model.FileHints;
}

table EncryptSymmetricBytesRequest {
  message:[ubyte];
  passphrase:string;
  options:model.KeyOptions;
  file_hints:model.FileHints;
}

table DecryptSymmetricRequest {
  message:string;
  passphrase:string;
  options:model.KeyOptions;
}

table DecryptSymmetricFileRequest {
  input:string;
  output:string;
  passphrase:string;
  options:model.KeyOptions;
}

table DecryptSymmetricBytesRequest {
  message:[ubyte];
  passphrase:string;
  options:model.KeyOptions;
}

table GenerateRequest {
  options:model.Options;
}

table ArmorEncodeRequest {
  packet:[ubyte];
  type:string;
}

table ArmorDecodeRequest {
  message:string;
}

table GetPublicKeyMetadataRequest {
  public_key:string;
}

table GetPrivateKeyMetadataRequest {
  private_key:string;
}

table ConvertPrivateKeyToPublicKeyRequest {
  private_key:string;
}

/// KeyOptions collects a number of parameters along with sensible defaults.
table KeyOptions {
  /// The public key algorithm to use - will always create a signing primary
  /// key and encryption subkey.
  algorithm:model.Algorithm;
  /// Curve configures the desired packet.Curve if the Algorithm is PubKeyAlgoECDSA,
  /// PubKeyAlgoEdDSA, or PubKeyAlgoECDH. If empty Curve25519 is used.
  curve:model.Curve;
  /// Hash is the default hash function to be used.
  /// If zero, SHA-256 is used.
  hash:model.Hash;
  /// Cipher is the cipher to be used.
  /// If zero, AES-128 is used.
  cipher:model.Cipher;
  /// Compression is the compression algorithm to be
  /// applied to the plaintext before encryption. If zero, no
  /// compression is done.
  compression:model.Compression;
  /// CompressionLevel is the compression level to use. It must be set to
  /// between -1 and 9, with -1 causing the compressor to use the
  /// default compression level, 0 causing the compressor to use
  /// no compression and 1 to 9 representing increasing (better,
  /// slower) compression levels. If Level is less than -1 or
  /// more then 9, a non-nil error will be returned during
  /// encryption. See the constants above for convenient common
  /// settings for Level.
  compression_level:int;
  /// RSABits is the number of bits in new RSA keys made with NewEntity.
  /// If zero, then 2048 bit keys are created.
  rsa_bits:int;
}

table Options {
  name:string;
  comment:string;
  email:string;
  passphrase:string;
  key_options:model.KeyOptions;
}

table FileHints {
  /// IsBinary can be set to hint that the contents are binary data.
  is_binary:bool;
  /// FileName hints at the name of the file that should be written. It's
  /// truncated to 255 bytes if longer. It may be empty to suggest that the
  /// file should not be written to disk. It may be equal to "_CONSOLE" to
  /// suggest the data should not be written to disk.
  file_name:string;
  /// ModTime format allowed: RFC3339, contains the modification time of the file, or the zero time if not applicable.
  mod_time:string;
}

/// An Entity represents the components of an OpenPGP key: a primary public key
/// (which must be a signing key), one or more identities claimed by that key,
/// and zero or more subkeys, which may be encryption keys.
table Entity {
  public_key:string;
  private_key:string;
  passphrase:string;
}

table StringResponse {
  output:string;
  error:string;
}

table BytesResponse {
  output:[ubyte];
  error:string;
}

table BoolResponse {
  output:bool;
  error:string;
}

table IntResponse {
  output:int64;
  error:string;
}

table ArmorDecodeResponse {
  output:model.ArmorMetadata;
  error:string;
}

table ArmorMetadata {
  body:[ubyte];
  type:string;
}

table KeyPairResponse {
  output:model.KeyPair;
  error:string;
}

table KeyPair {
  public_key:string;
  private_key:string;
}

table PublicKeyMetadataResponse {
  output:model.PublicKeyMetadata;
  error:string;
}

table PrivateKeyMetadataResponse {
  output:model.PrivateKeyMetadata;
  error:string;
}

table Identity {
  id:string;
  comment:string;
  email:string;
  name:string;
}

table PublicKeyMetadata {
  algorithm:string;
  key_id:string;
  key_id_short:string;
  creation_time:string;
  fingerprint:string;
  key_id_numeric:string;
  is_sub_key:bool;
  can_sign:bool;
  can_encrypt:bool;
  identities:[model.Identity];
  sub_keys:[model.PublicKeyMetadata];
}

table PrivateKeyMetadata {
  key_id:string;
  key_id_short:string;
  creation_time:string;
  fingerprint:string;
  key_id_numeric:string;
  is_sub_key:bool;
  encrypted:bool;
  can_sign:bool;
  identities:[model.Identity];
  sub_keys:[model.PrivateKeyMetadata];
}
